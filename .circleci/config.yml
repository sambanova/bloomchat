version: 2.1

orbs:
  slack: circleci/slack@4.12.5

executors:
  python-docker:
    docker:
      - image: cimg/python:3.9
    resource_class: medium
  pip-tools-docker:
    docker:
      - image: python:3.9
    resource_class: medium
  base:
    docker:
      - image: cimg/base:stable
    resource_class: small

# Define the jobs we want to run for this project
jobs:
  pre-commit:
    executor: pip-tools-docker
    steps:
      - checkout
      - run:
          name: Generate Cache Key
          command: |
            echo date +%Y-%V > circleci_cache_key
            echo python -V >> circleci_cache_key
      - restore_cache:
          key: v1-{{ arch }}-{{ checksum "pyproject.toml" }}-{{ checksum "circleci_cache_key" }}
      - run:
          # NOTE: Requires redundant "pip install -U pip" command to avoid OSError
          name: Run Pre-commit
          command: |
            source .circleci/VERSIONS && pip install pipenv==${PIPENV_VERSION}
            pipenv sync --categories tests-packages
            pipenv run pre-commit run --all-files
            pipenv check
      - save_cache:
          key: v1-{{ arch }}-{{ checksum "pyproject.toml" }}-{{ checksum "circleci_cache_key" }}
          paths:
            - ~/.cache/pip
            - ~/.cache/pre-commit
  test:
    executor: python-docker
    steps:
      - checkout
      - run:
          name: Generate Cache Key
          command: |
            echo date +%Y-%V > circleci_cache_key
            echo python -V >> circleci_cache_key
      - restore_cache:
          key: v2-{{ arch }}-{{ checksum "pyproject.toml" }}-{{ checksum "circleci_cache_key" }}
      - run:
          name: Instantiate Python Virtual Environment
          command: |
            source .circleci/VERSIONS && pip install pipenv==${PIPENV_VERSION}
            pipenv run pip install -e .
            pipenv sync --categories=default,build-packages,docs-packages,tests-packages
      - save_cache:
          key: v2-{{ arch }}-{{ checksum "pyproject.toml" }}-{{ checksum "circleci_cache_key" }}
          paths:
            - ~/.cache/pip
          when: always
      - run:
          name: Generate Sphix Docs
          command: pipenv run sphinx-build -b html docs/source docs/build/html
      - run:
          name: Run Pytest
          command: pipenv run pytest
          when: always
      - run:
          name: Build Python Package
          command: pipenv run hatch build
      - store_test_results:
          path: test_reports/circleci
      - store_artifacts:
          path: test_reports
      - store_artifacts:
          path: docs/build/html
      - when:
          condition: << pipeline.git.tag >>
          steps:
            - persist_to_workspace:
                root: .
                paths:
                  - dist
  publish-python:
    executor: python-docker
    steps:
      - attach_workspace:
          at: $CIRCLE_WORKING_DIRECTORY
      - run:
          name: Publish Python Package
          command: 'echo "TODO: Please configure jfrog secrets to publish docker image."'
          # TODO: Enable once package is ready to be published to pypi
          # command: pipenv run pip install twine && pipenv run twine upload dist/*
  notify:
    executor:
      name: base
    steps:
      - slack/notify:
          custom: |
            {
              "text": "Tagged Build Successful",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${CIRCLE_PROJECT_REPONAME}: ${CIRCLE_TAG} :tada:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project*: ${CIRCLE_PROJECT_REPONAME}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Tag*: ${CIRCLE_TAG}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*UTC*: $(date +'%m/%d/%Y %H:%M')"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*PST*: $(TZ='America/Los_Angeles' date +'%m/%d/%Y %H:%M')"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "action_id": "success_tagged_deploy_view",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    },
                    {
                      "type": "button",
                      "action_id": "build_release_notes",
                      "text": {
                        "type": "plain_text",
                        "text": "View Release Notes"
                      },
                      "url": "<< pipeline.project.git_url >>/releases/tag/${CIRCLE_TAG}"
                    }
                  ]
                }
              ]
            }

# Orchestrate our job run sequence
workflows:
  build-test:
    jobs:
      - pre-commit
      - test
  build-test-publish:
    jobs:
      - pre-commit:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - test:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish-python:
          requires:
            - pre-commit
            - test
      - notify:
          context:
            - slack
          requires:
            - publish-python

  weekly_cron:
    triggers:
      - schedule:
          cron: "0 0 * * 6"
          filters:
            branches:
              only:
                - main
    jobs:
      - pre-commit
      - test
